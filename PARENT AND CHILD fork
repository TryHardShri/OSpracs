//PARENT AND CHILD EXECUTE SAME PROGRAM AND SAME CODE
#include <stdio.h>
#include <uninstd.h>
#include <stdlib.h>
int main() {
    pid_t pid,p;
    p=fork();
    pid=getpid();
    if(p<0){
        fprintf(stderr, "Failed Fork!")
        return 1;
    }
    printf("Output of fork id: %d \n",p);
    printf("Process id is: %d \n", pid);
    return 0;
}





//SAME PROGRAM, DIFFERENT CODE
#include <stdio.h>
#include <uninstd.h>
#include <stdlib.h>
int main() {
    int pid;
    pid=fork();
    if (pid<0){
        print("\n Error");
        exit(1);
    };
    else if(pid==0){
        printf("\n Hello I am child process ");
        print("\n My pid is %d ", getpid());
        exit(0);
    };
    else{
    printf("\n Hello I am parent process ");
    printf("\n My actual pid is %d \n", getpid());
    exit(1);
    };
}





//PARENT WAITS FOR CHILD
#include <stdio.h>
#include <uninstd.h>
#include <stdlib.h>
int main(){
    int pid;
    pid=fork();
    if (pid<0){
        print("\n Error");
        exit(1);
    };
    else if(pid==0){
        printf("\n Hello I am child process ");
        print("\n My pid is %d ", getpid());
        exit(0);
    };
    else{
        printf("\n Hello I am parent process ");
        printf("\n My actual pid is %d\n", getpid());
        wait (NULL);
        exit(1);
    };
}
